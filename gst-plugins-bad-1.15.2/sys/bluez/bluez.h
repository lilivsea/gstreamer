/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUEZ_H__
#define __BLUEZ_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.MediaTransport1 */

#define BLUEZ_TYPE_MEDIA_TRANSPORT1 (bluez_media_transport1_get_type ())
#define BLUEZ_MEDIA_TRANSPORT1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1, BluezMediaTransport1))
#define BLUEZ_IS_MEDIA_TRANSPORT1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1))
#define BLUEZ_MEDIA_TRANSPORT1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1, BluezMediaTransport1Iface))

struct _BluezMediaTransport1;
typedef struct _BluezMediaTransport1 BluezMediaTransport1;
typedef struct _BluezMediaTransport1Iface BluezMediaTransport1Iface;

struct _BluezMediaTransport1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_acquire) (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

  gboolean (*handle_release) (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_try_acquire) (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

  guchar  (*get_codec) (BluezMediaTransport1 *object);

  GVariant * (*get_configuration) (BluezMediaTransport1 *object);

  guint16  (*get_delay) (BluezMediaTransport1 *object);

  const gchar * (*get_device) (BluezMediaTransport1 *object);

  const gchar * (*get_state) (BluezMediaTransport1 *object);

  const gchar * (*get_uuid) (BluezMediaTransport1 *object);

  guint16  (*get_volume) (BluezMediaTransport1 *object);

};

GType bluez_media_transport1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_media_transport1_interface_info (void);
guint bluez_media_transport1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_media_transport1_complete_acquire (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd,
    guint16 mtu_r,
    guint16 mtu_w);

void bluez_media_transport1_complete_try_acquire (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    GVariant *fd,
    guint16 mtu_r,
    guint16 mtu_w);

void bluez_media_transport1_complete_release (
    BluezMediaTransport1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_media_transport1_call_acquire (
    BluezMediaTransport1 *proxy,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_transport1_call_acquire_finish (
    BluezMediaTransport1 *proxy,
    GVariant **out_fd,
    guint16 *out_mtu_r,
    guint16 *out_mtu_w,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_transport1_call_acquire_sync (
    BluezMediaTransport1 *proxy,
    GUnixFDList  *fd_list,
    GVariant **out_fd,
    guint16 *out_mtu_r,
    guint16 *out_mtu_w,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void bluez_media_transport1_call_try_acquire (
    BluezMediaTransport1 *proxy,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_transport1_call_try_acquire_finish (
    BluezMediaTransport1 *proxy,
    GVariant **out_fd,
    guint16 *out_mtu_r,
    guint16 *out_mtu_w,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_transport1_call_try_acquire_sync (
    BluezMediaTransport1 *proxy,
    GUnixFDList  *fd_list,
    GVariant **out_fd,
    guint16 *out_mtu_r,
    guint16 *out_mtu_w,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void bluez_media_transport1_call_release (
    BluezMediaTransport1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_transport1_call_release_finish (
    BluezMediaTransport1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_transport1_call_release_sync (
    BluezMediaTransport1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_media_transport1_get_device (BluezMediaTransport1 *object);
gchar *bluez_media_transport1_dup_device (BluezMediaTransport1 *object);
void bluez_media_transport1_set_device (BluezMediaTransport1 *object, const gchar *value);

const gchar *bluez_media_transport1_get_uuid (BluezMediaTransport1 *object);
gchar *bluez_media_transport1_dup_uuid (BluezMediaTransport1 *object);
void bluez_media_transport1_set_uuid (BluezMediaTransport1 *object, const gchar *value);

guchar bluez_media_transport1_get_codec (BluezMediaTransport1 *object);
void bluez_media_transport1_set_codec (BluezMediaTransport1 *object, guchar value);

GVariant *bluez_media_transport1_get_configuration (BluezMediaTransport1 *object);
GVariant *bluez_media_transport1_dup_configuration (BluezMediaTransport1 *object);
void bluez_media_transport1_set_configuration (BluezMediaTransport1 *object, GVariant *value);

const gchar *bluez_media_transport1_get_state (BluezMediaTransport1 *object);
gchar *bluez_media_transport1_dup_state (BluezMediaTransport1 *object);
void bluez_media_transport1_set_state (BluezMediaTransport1 *object, const gchar *value);

guint16 bluez_media_transport1_get_delay (BluezMediaTransport1 *object);
void bluez_media_transport1_set_delay (BluezMediaTransport1 *object, guint16 value);

guint16 bluez_media_transport1_get_volume (BluezMediaTransport1 *object);
void bluez_media_transport1_set_volume (BluezMediaTransport1 *object, guint16 value);


/* ---- */

#define BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY (bluez_media_transport1_proxy_get_type ())
#define BLUEZ_MEDIA_TRANSPORT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY, BluezMediaTransport1Proxy))
#define BLUEZ_MEDIA_TRANSPORT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY, BluezMediaTransport1ProxyClass))
#define BLUEZ_MEDIA_TRANSPORT1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY, BluezMediaTransport1ProxyClass))
#define BLUEZ_IS_MEDIA_TRANSPORT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY))
#define BLUEZ_IS_MEDIA_TRANSPORT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_MEDIA_TRANSPORT1_PROXY))

typedef struct _BluezMediaTransport1Proxy BluezMediaTransport1Proxy;
typedef struct _BluezMediaTransport1ProxyClass BluezMediaTransport1ProxyClass;
typedef struct _BluezMediaTransport1ProxyPrivate BluezMediaTransport1ProxyPrivate;

struct _BluezMediaTransport1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BluezMediaTransport1ProxyPrivate *priv;
};

struct _BluezMediaTransport1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_media_transport1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezMediaTransport1Proxy, g_object_unref)
#endif

void bluez_media_transport1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezMediaTransport1 *bluez_media_transport1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BluezMediaTransport1 *bluez_media_transport1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_media_transport1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezMediaTransport1 *bluez_media_transport1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BluezMediaTransport1 *bluez_media_transport1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON (bluez_media_transport1_skeleton_get_type ())
#define BLUEZ_MEDIA_TRANSPORT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON, BluezMediaTransport1Skeleton))
#define BLUEZ_MEDIA_TRANSPORT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON, BluezMediaTransport1SkeletonClass))
#define BLUEZ_MEDIA_TRANSPORT1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON, BluezMediaTransport1SkeletonClass))
#define BLUEZ_IS_MEDIA_TRANSPORT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON))
#define BLUEZ_IS_MEDIA_TRANSPORT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_MEDIA_TRANSPORT1_SKELETON))

typedef struct _BluezMediaTransport1Skeleton BluezMediaTransport1Skeleton;
typedef struct _BluezMediaTransport1SkeletonClass BluezMediaTransport1SkeletonClass;
typedef struct _BluezMediaTransport1SkeletonPrivate BluezMediaTransport1SkeletonPrivate;

struct _BluezMediaTransport1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BluezMediaTransport1SkeletonPrivate *priv;
};

struct _BluezMediaTransport1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_media_transport1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezMediaTransport1Skeleton, g_object_unref)
#endif

BluezMediaTransport1 *bluez_media_transport1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.MediaPlayer1 */

#define BLUEZ_TYPE_MEDIA_PLAYER1 (bluez_media_player1_get_type ())
#define BLUEZ_MEDIA_PLAYER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_PLAYER1, BluezMediaPlayer1))
#define BLUEZ_IS_MEDIA_PLAYER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_PLAYER1))
#define BLUEZ_MEDIA_PLAYER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BLUEZ_TYPE_MEDIA_PLAYER1, BluezMediaPlayer1Iface))

struct _BluezMediaPlayer1;
typedef struct _BluezMediaPlayer1 BluezMediaPlayer1;
typedef struct _BluezMediaPlayer1Iface BluezMediaPlayer1Iface;

struct _BluezMediaPlayer1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_fast_forward) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_next) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_pause) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_play) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_previous) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_rewind) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop) (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_browsable) (BluezMediaPlayer1 *object);

  const gchar * (*get_device) (BluezMediaPlayer1 *object);

  const gchar * (*get_equalizer) (BluezMediaPlayer1 *object);

  const gchar * (*get_name) (BluezMediaPlayer1 *object);

  const gchar * (*get_playlist) (BluezMediaPlayer1 *object);

  guint  (*get_position) (BluezMediaPlayer1 *object);

  const gchar * (*get_repeat) (BluezMediaPlayer1 *object);

  const gchar * (*get_scan) (BluezMediaPlayer1 *object);

  gboolean  (*get_searchable) (BluezMediaPlayer1 *object);

  const gchar * (*get_shuffle) (BluezMediaPlayer1 *object);

  const gchar * (*get_status) (BluezMediaPlayer1 *object);

  const gchar * (*get_subtype) (BluezMediaPlayer1 *object);

  GVariant * (*get_track) (BluezMediaPlayer1 *object);

  const gchar * (*get_type_) (BluezMediaPlayer1 *object);

};

GType bluez_media_player1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bluez_media_player1_interface_info (void);
guint bluez_media_player1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bluez_media_player1_complete_play (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_pause (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_stop (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_next (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_previous (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_fast_forward (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);

void bluez_media_player1_complete_rewind (
    BluezMediaPlayer1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void bluez_media_player1_call_play (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_play_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_play_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_pause (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_pause_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_pause_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_stop (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_stop_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_stop_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_next (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_next_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_next_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_previous (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_previous_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_previous_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_fast_forward (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_fast_forward_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_fast_forward_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);

void bluez_media_player1_call_rewind (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bluez_media_player1_call_rewind_finish (
    BluezMediaPlayer1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bluez_media_player1_call_rewind_sync (
    BluezMediaPlayer1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *bluez_media_player1_get_name (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_name (BluezMediaPlayer1 *object);
void bluez_media_player1_set_name (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_type_ (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_type_ (BluezMediaPlayer1 *object);
void bluez_media_player1_set_type_ (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_subtype (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_subtype (BluezMediaPlayer1 *object);
void bluez_media_player1_set_subtype (BluezMediaPlayer1 *object, const gchar *value);

guint bluez_media_player1_get_position (BluezMediaPlayer1 *object);
void bluez_media_player1_set_position (BluezMediaPlayer1 *object, guint value);

const gchar *bluez_media_player1_get_status (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_status (BluezMediaPlayer1 *object);
void bluez_media_player1_set_status (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_equalizer (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_equalizer (BluezMediaPlayer1 *object);
void bluez_media_player1_set_equalizer (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_repeat (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_repeat (BluezMediaPlayer1 *object);
void bluez_media_player1_set_repeat (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_shuffle (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_shuffle (BluezMediaPlayer1 *object);
void bluez_media_player1_set_shuffle (BluezMediaPlayer1 *object, const gchar *value);

const gchar *bluez_media_player1_get_scan (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_scan (BluezMediaPlayer1 *object);
void bluez_media_player1_set_scan (BluezMediaPlayer1 *object, const gchar *value);

GVariant *bluez_media_player1_get_track (BluezMediaPlayer1 *object);
GVariant *bluez_media_player1_dup_track (BluezMediaPlayer1 *object);
void bluez_media_player1_set_track (BluezMediaPlayer1 *object, GVariant *value);

const gchar *bluez_media_player1_get_device (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_device (BluezMediaPlayer1 *object);
void bluez_media_player1_set_device (BluezMediaPlayer1 *object, const gchar *value);

gboolean bluez_media_player1_get_browsable (BluezMediaPlayer1 *object);
void bluez_media_player1_set_browsable (BluezMediaPlayer1 *object, gboolean value);

gboolean bluez_media_player1_get_searchable (BluezMediaPlayer1 *object);
void bluez_media_player1_set_searchable (BluezMediaPlayer1 *object, gboolean value);

const gchar *bluez_media_player1_get_playlist (BluezMediaPlayer1 *object);
gchar *bluez_media_player1_dup_playlist (BluezMediaPlayer1 *object);
void bluez_media_player1_set_playlist (BluezMediaPlayer1 *object, const gchar *value);


/* ---- */

#define BLUEZ_TYPE_MEDIA_PLAYER1_PROXY (bluez_media_player1_proxy_get_type ())
#define BLUEZ_MEDIA_PLAYER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_PLAYER1_PROXY, BluezMediaPlayer1Proxy))
#define BLUEZ_MEDIA_PLAYER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_MEDIA_PLAYER1_PROXY, BluezMediaPlayer1ProxyClass))
#define BLUEZ_MEDIA_PLAYER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_MEDIA_PLAYER1_PROXY, BluezMediaPlayer1ProxyClass))
#define BLUEZ_IS_MEDIA_PLAYER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_PLAYER1_PROXY))
#define BLUEZ_IS_MEDIA_PLAYER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_MEDIA_PLAYER1_PROXY))

typedef struct _BluezMediaPlayer1Proxy BluezMediaPlayer1Proxy;
typedef struct _BluezMediaPlayer1ProxyClass BluezMediaPlayer1ProxyClass;
typedef struct _BluezMediaPlayer1ProxyPrivate BluezMediaPlayer1ProxyPrivate;

struct _BluezMediaPlayer1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BluezMediaPlayer1ProxyPrivate *priv;
};

struct _BluezMediaPlayer1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType bluez_media_player1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezMediaPlayer1Proxy, g_object_unref)
#endif

void bluez_media_player1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezMediaPlayer1 *bluez_media_player1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BluezMediaPlayer1 *bluez_media_player1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bluez_media_player1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BluezMediaPlayer1 *bluez_media_player1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BluezMediaPlayer1 *bluez_media_player1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON (bluez_media_player1_skeleton_get_type ())
#define BLUEZ_MEDIA_PLAYER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON, BluezMediaPlayer1Skeleton))
#define BLUEZ_MEDIA_PLAYER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON, BluezMediaPlayer1SkeletonClass))
#define BLUEZ_MEDIA_PLAYER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON, BluezMediaPlayer1SkeletonClass))
#define BLUEZ_IS_MEDIA_PLAYER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON))
#define BLUEZ_IS_MEDIA_PLAYER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BLUEZ_TYPE_MEDIA_PLAYER1_SKELETON))

typedef struct _BluezMediaPlayer1Skeleton BluezMediaPlayer1Skeleton;
typedef struct _BluezMediaPlayer1SkeletonClass BluezMediaPlayer1SkeletonClass;
typedef struct _BluezMediaPlayer1SkeletonPrivate BluezMediaPlayer1SkeletonPrivate;

struct _BluezMediaPlayer1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BluezMediaPlayer1SkeletonPrivate *priv;
};

struct _BluezMediaPlayer1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bluez_media_player1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BluezMediaPlayer1Skeleton, g_object_unref)
#endif

BluezMediaPlayer1 *bluez_media_player1_skeleton_new (void);


G_END_DECLS

#endif /* __BLUEZ_H__ */
